#!/usr/bin/python
# -*- coding: utf-8;tab-width: 4; mode: python; indent-tabs-mode: nil -*-
"""
  Z-Build
  Software Build Automation Tool (C) 2009 - Jonas Drewsen

  Builds by executing scripts in a specified directory. The scripts
  locations are imported into a sqlite database and buildsets can be
  created containing a number of scripts.

  Builds can be executed in the background and the build status can be
  queried.
"""

import sys
import os
import os.path
from  datetime import datetime
import lib.config
from lib import utils
import lib.commands

def usage():
    """
    Return simple usage string
    """
    return "%prog [options] <command> ..."


def help_epilog(include_usage=False):
    """
    Return usage help epilog
    """
    out = ""
    if include_usage:
        out += usage().replace('%prog', os.path.basename(sys.argv[0])) + "\n"
    out += "\n"
    out += "'zbuild init' to make this a zbuild dir\n"
    out += "\n"
    out += "A buildset consists of a sequence of scripts that will be\n"
    out += "executed when the buildset is build\n"
    out += "\n"

    if include_usage:
        out += "commands ( -h for more help ): \n"

    commands = { '01init' : 'initialize current dir for zbuild',
                 '02list'    : 'list buildsets or scripts',
                 '03build'   : 'build a specified buildset',
                 '04status'  : 'status of running build if any',
                 '05addscript' : 'add a script to a buildset',
                 '06rmscript'  : 'remove a script from a buildset',
                 #'6release' : 'release scripts from a given buildset',
                 '07sync' : 'sync scripts to be available for buildsets', 
                 '08server' : 'run as http server',
                 '09schedule' : 'schedule a build to be run later',
                 '10re' : 'run all scripts where regex matches path',
                 '11unittest' : 'short for "re unittest"',
                 '12functest' : 'short for "re functest"',
                 '13stage'    : 'short for "re state"',
                 '14release'  : 'short for "re release"'
                 }

    keys = commands.keys()
    keys.sort()
    for i in keys:
        out += "  " + i[2:].ljust(9) + " : " + commands[i] + "\n"

    return out


lib.config.get_config([
    ('w', 'work-dir', 'path of where to work', './.zbuild'),
    ('b', 'build-area', 'path of where to do the builds', '<work-dir>/build-area'),
    ('c', 'config-filename', 'config file location', '<work-dir>/zbuild.conf'),
    ('l', 'log-filename', 'log file location', "<work-dir>/zbuild.log"),
    ('e', 'environment', 'Environment', 'development', ['development', 'production', 'staging', 'demo']),
    ('C', 'repos-copy', 'path of where to put svn checkout copy', '<work-dir>/repos-local-copy'),
    # ('r', 'repos', 'url to repository', 'git://github.com/jcd/zbuild.git'),
    ('d', 'released-debs-path', 'path where to put released deb scripts', '<work-dir>/deb-repos'),
    ('s', 'schedule-at', 'Schedule queued build at give time (HH:MM or YYYY-MM-DD HH:MM)', ''),
    ('n', 'no-clean', 'do not clean existing target but rebuild'),
    ('R', 'revision', 'svn revision to build', "HEAD"),
    ('B', 'branch', 'git branch to build', "master"),
    ('i', 'start-index', "When command is 'build' this is the index of the buildset to start at", 0),
    ('I', 'stop-index', "When command is 'build' this is the index of the buildset to stop at", 10000000),
    #('b', 'enable-release', 'this build will release scripts'),
    ('p', 'port', 'Listen on port', 8765),
    ('P', 'pid-file', 'Path to pid file', '<work-dir>/zbuild.pid')
    ], epilog=help_epilog(), usage=usage())


def handle_command_line(args):
    """
    Parse the command from command and perform
    """
    if len(args) >= 1:
        command = args[0].lower()
    else:
        print help_epilog(True)
        return

    if command in ('unittest', 'functest', 'stage', 'release'):
        args[0] = args[0]
        args.insert(0,'re')
        command = 're'
        
    # rename short names to full names
    command = {
        'enq' : 'enqueue',
        'list' : 'listing',
        'ls' : 'listing',
        'rel' : 'release',
        'st' : 'status',
        'rm' : 'remove'
        }.get(command, command)
    
    argc = len(args)
    commands = [ 'enqueue', 'schedule', 'add', 'remove', 'listing', 'status',
                 'release', 'sync', 'server', 'build', 're', 'init' ]


    if command not in commands:
        if command != 'help':
            print "Unknown command '%s'" % command
        print help_epilog(True)
        return

    getattr(lib.commands, command)(args)
    

if __name__ == "__main__":

    work_dir = os.path.abspath(os.path.expanduser(OPTIONS.work_dir))

    if not len(ARGS):
        print("Use 'zbuild help' for usage")
        sys.exit(1)
        
    if not os.path.exists(work_dir + os.path.sep + "zbuild.sqlite") and (len(ARGS) != 0 and ARGS[0] not in ('init', 'help')):
        print("This is not a zbuild dir. Use 'zbuild init' or 'zbuild help'")
        sys.exit(1)
    
    OPTIONS.work_dir = work_dir

    for i in ['config_filename', 'log_filename', 'repos_copy',
              'released_debs_path', 'build_area', 'pid_file']:
        dd = getattr(OPTIONS, i)
        dd = os.path.expanduser(dd.replace('<work-dir>',work_dir))
        setattr(OPTIONS, i, dd)

    # Change to script dir
    OPTIONS.zbuild_install_dir = os.path.abspath(sys.path[0])
    OPTIONS.released_debs_path = os.path.expanduser(OPTIONS.released_debs_path)
    OPTIONS.pwd = os.environ['PWD']
    
    os.environ['ZBUILD_EXECUTABLE'] = OPTIONS.zbuild_install_dir
    os.environ['ZBUILD_REPOS_LOCAL_COPY'] = os.path.expanduser(OPTIONS.repos_copy)
    os.environ['ZBUILD_WORKDIR'] = work_dir
    os.environ['ZBUILD_PWD'] = OPTIONS.pwd
    os.environ['ZBUILD_BUILDDIR'] = OPTIONS.build_area
    os.environ['ZBUILD_RELEASE_DIR'] = OPTIONS.released_debs_path
    os.environ['ZBUILD_REV'] = OPTIONS.revision
    os.environ['ZBUILD_BRANCH'] = OPTIONS.branch
    os.environ['ZBUILD_ENVIRONMENT'] = OPTIONS.environment

    if OPTIONS.no_clean:
        os.environ['ZBUILD_NOCLEAN_ENABLED'] = OPTIONS.no_clean and '1' or ''

    os.environ['ZBUILD_STARTDIR'] = os.path.abspath(os.curdir)

    handle_command_line(ARGS)
